
//  ******************************************************
//
//     File generated by: neuroConstruct v1.6.0
//
//     Generally replicates hoc for Cell Type as exported from
//     NEURON's Cell Builder, together with some neuroConstruct
//     specific helper/info procedures, e.g. toString(), netInfo()
//
//  ******************************************************


begintemplate pyr_23_asym_stripped

public init, topol, basic_shape, subsets, geom, memb
//public synlist, x, y, z, position, connect2target


//  Some fields for referencing the cells

//public reference, type, description, name
//strdef reference, type, description, name


//  Some methods for referencing the cells

//public toString, netInfo

public all

//objref synlist
objref all
objref stringFuncs

public soma_group
objref soma_group
public dendrite_group
objref dendrite_group

proc init() {
    topol()
    subsets()
    geom()
    biophys()
    geom_nseg()
    //synlist = new List()
    x = y = z = 0
    /*reference = $s1
    type = $s2
    description = $s3

    strdef indexNum
    stringFuncs = new StringFunctions()
    stringFuncs.tail(reference, "_", indexNum)
    while (stringFuncs.substr( indexNum, "_")>=0) {
        stringFuncs.tail(indexNum, "_", indexNum)
    }

    sprint(name, "%s", type)
    */
}

create soma
public soma
create apical0
public apical0
create apical1
public apical1
create apical2
public apical2
create apical3
public apical3
create apical4a
public apical4a
create apical4b
public apical4b
create oblique1
public oblique1
create oblique2a
public oblique2a
create oblique2b
public oblique2b
create basal0
public basal0
create basal1a
public basal1a
create basal1b
public basal1b
create basal2a
public basal2a
create basal2b
public basal2b
create basal2c
public basal2c
create basal2d
public basal2d

proc topol() {
    connect apical0(0), soma(1.0)
    connect apical1(0), apical0(1.0)
    connect apical2(0), apical1(1.0)
    connect apical3(0), apical2(1.0)
    connect apical4a(0), apical3(1.0)
    connect apical4b(0), apical3(1.0)
    connect oblique1(0), apical0(1.0)
    connect oblique2a(0), oblique1(1.0)
    connect oblique2b(0), oblique1(1.0)
    connect basal0(0), soma(1.0)
    connect basal1a(0), basal0(1.0)
    connect basal1b(0), basal0(1.0)
    connect basal2a(0), basal1a(1.0)
    connect basal2b(0), basal1a(1.0)
    connect basal2c(0), basal1b(1.0)
    connect basal2d(0), basal1b(1.0)
    basic_shape()
}

proc basic_shape() {

//  Looking at segment number 0: soma, section: soma, ID: 0, ROOT SEGMENT, rad: 9.25, (0.0, 0.0, 0.0) -> (0.0, 0.0, 19.0), len: 19 (FINITE VOLUME)
    soma {pt3dclear() pt3dadd(0.0, 0.0, 0.0, 18.5) pt3dadd(0.0, 0.0, 19.0, 18.5)}

//  Looking at segment number 1: apical0, section: apical0, ID: 1, parent: soma (0), rad: 1.45, (0.0, 0.0, 19.0) -> (0.0, 0.0, 85.0), len: 66
    apical0 {pt3dclear() pt3dadd(0.0, 0.0, 19.0, 2.9) pt3dadd(0.0, 0.0, 85.0, 2.9)}

//  Looking at segment number 2: apical1, section: apical1, ID: 2, parent: apical0 (1), rad: 0.9, (0.0, 0.0, 85.0) -> (0.0, 0.0, 420.0), len: 335
    apical1 {pt3dclear() pt3dadd(0.0, 0.0, 85.0, 1.8) pt3dadd(0.0, 0.0, 420.0, 1.8)}

//  Looking at segment number 3: apical2, section: apical2, ID: 3, parent: apical1 (2), rad: 1.15, (0.0, 0.0, 420.0) -> (0.0, 0.0, 687.0), len: 267
    apical2 {pt3dclear() pt3dadd(0.0, 0.0, 420.0, 2.3) pt3dadd(0.0, 0.0, 687.0, 2.3)}

//  Looking at segment number 4: apical3, section: apical3, ID: 4, parent: apical2 (3), rad: 1.15, (0.0, 0.0, 687.0) -> (0.0, 0.0, 771.0), len: 84
    apical3 {pt3dclear() pt3dadd(0.0, 0.0, 687.0, 2.3) pt3dadd(0.0, 0.0, 771.0, 2.3)}

//  Looking at segment number 5: apical4a, section: apical4a, ID: 5, parent: apical3 (4), rad: 1.15, (0.0, 0.0, 771.0) -> (-189.0, 0.0, 960.0), len: 267.286
    apical4a {pt3dclear() pt3dadd(0.0, 0.0, 771.0, 2.3) pt3dadd(-189.0, 0.0, 960.0, 2.3)}

//  Looking at segment number 6: apical4b, section: apical4b, ID: 6, parent: apical3 (4), rad: 1.15, (0.0, 0.0, 771.0) -> (189.0, 0.0, 960.0), len: 267.286
    apical4b {pt3dclear() pt3dadd(0.0, 0.0, 771.0, 2.3) pt3dadd(189.0, 0.0, 960.0, 2.3)}

//  Looking at segment number 7: oblique1, section: oblique1, ID: 7, parent: apical0 (1), rad: 2.45, (0.0, 0.0, 85.0) -> (-34.0, 0.0, 85.0), len: 34
    oblique1 {pt3dclear() pt3dadd(0.0, 0.0, 85.0, 4.9) pt3dadd(-34.0, 0.0, 85.0, 4.9)}

//  Looking at segment number 8: oblique2a, section: oblique2a, ID: 8, parent: oblique1 (7), rad: 1.15, (-34.0, 0.0, 85.0) -> (-105.0, 0.0, 14.0), len: 100.409
    oblique2a {pt3dclear() pt3dadd(-34.0, 0.0, 85.0, 2.3) pt3dadd(-105.0, 0.0, 14.0, 2.3)}

//  Looking at segment number 9: oblique2b, section: oblique2b, ID: 9, parent: oblique1 (7), rad: 1.15, (-34.0, 0.0, 85.0) -> (-105.0, 0.0, 156.0), len: 100.409
    oblique2b {pt3dclear() pt3dadd(-34.0, 0.0, 85.0, 2.3) pt3dadd(-105.0, 0.0, 156.0, 2.3)}

//  Looking at segment number 10: basal0, section: basal0, ID: 10, parent: soma (0), rad: 3.0, (0.0, 0.0, 19.0) -> (0.0, 0.0, -13.0), len: 32
    basal0 {pt3dclear() pt3dadd(0.0, 0.0, 19.0, 6.0) pt3dadd(0.0, 0.0, -13.0, 6.0)}

//  Looking at segment number 11: basal1a, section: basal1a, ID: 11, parent: basal0 (10), rad: 1.75, (0.0, 0.0, -13.0) -> (-22.0, 0.0, -35.0), len: 31.1127
    basal1a {pt3dclear() pt3dadd(0.0, 0.0, -13.0, 3.5) pt3dadd(-22.0, 0.0, -35.0, 3.5)}

//  Looking at segment number 12: basal1b, section: basal1b, ID: 12, parent: basal0 (10), rad: 1.75, (0.0, 0.0, -13.0) -> (22.0, 0.0, -35.0), len: 31.1127
    basal1b {pt3dclear() pt3dadd(0.0, 0.0, -13.0, 3.5) pt3dadd(22.0, 0.0, -35.0, 3.5)}

//  Looking at segment number 13: basal2a, section: basal2a, ID: 13, parent: basal1a (11), rad: 1.75, (-22.0, 0.0, -35.0) -> (-222.0, 0.0, -35.0), len: 200
    basal2a {pt3dclear() pt3dadd(-22.0, 0.0, -35.0, 3.5) pt3dadd(-222.0, 0.0, -35.0, 3.5)}

//  Looking at segment number 14: basal2b, section: basal2b, ID: 14, parent: basal1a (11), rad: 1.75, (-22.0, 0.0, -35.0) -> (-22.0, 0.0, -235.0), len: 200
    basal2b {pt3dclear() pt3dadd(-22.0, 0.0, -35.0, 3.5) pt3dadd(-22.0, 0.0, -235.0, 3.5)}

//  Looking at segment number 15: basal2c, section: basal2c, ID: 15, parent: basal1b (12), rad: 1.75, (22.0, 0.0, -35.0) -> (22.0, 0.0, -235.0), len: 200
    basal2c {pt3dclear() pt3dadd(22.0, 0.0, -35.0, 3.5) pt3dadd(22.0, 0.0, -235.0, 3.5)}

//  Looking at segment number 16: basal2d, section: basal2d, ID: 16, parent: basal1b (12), rad: 1.75, (22.0, 0.0, -35.0) -> (222.0, 0.0, -35.0), len: 200
    basal2d {pt3dclear() pt3dadd(22.0, 0.0, -35.0, 3.5) pt3dadd(222.0, 0.0, -35.0, 3.5)}
}


proc subsets() { local i


//  The group all is assumed never to change
    all = new SectionList()


    soma_group = new SectionList()

    soma soma_group.append()


    dendrite_group = new SectionList()

    apical0 dendrite_group.append()
    apical1 dendrite_group.append()
    apical2 dendrite_group.append()
    apical3 dendrite_group.append()
    apical4a dendrite_group.append()
    apical4b dendrite_group.append()
    oblique1 dendrite_group.append()
    oblique2a dendrite_group.append()
    oblique2b dendrite_group.append()
    basal0 dendrite_group.append()
    basal1a dendrite_group.append()
    basal1b dendrite_group.append()
    basal2a dendrite_group.append()
    basal2b dendrite_group.append()
    basal2c dendrite_group.append()
    basal2d dendrite_group.append()


    soma all.append()
    apical0 all.append()
    apical1 all.append()
    apical2 all.append()
    apical3 all.append()
    apical4a all.append()
    apical4b all.append()
    oblique1 all.append()
    oblique2a all.append()
    oblique2b all.append()
    basal0 all.append()
    basal1a all.append()
    basal1b all.append()
    basal2a all.append()
    basal2b all.append()
    basal2c all.append()
    basal2d all.append()
}

proc geom() {
}

proc biophys() {
    forsec all cm = 1.0
    forsec all Ra = 30.0

    soma {
     insert pas
     insert Ca_HVA
     insert SKv3_1
     insert K_Tst
     insert NaTa_t
     insert CaDynamics_E2
     insert kca

     decay_CaDynamics_E2 = 460.0
     gamma_CaDynamics_E2 = 0.000501
     gK_Tstbar_K_Tst = 0.0812 // g is max conductance
     gCa_HVAbar_Ca_HVA = 0.000992
     gSKv3_1bar_SKv3_1 = 0.693
     gNaTa_tbar_NaTa_t = 2.04
     gbar_kca = 10

     ek = -85
     ena = 50
     eca = 140

     g_pas=.00012
     e_pas= -73

     }


}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1

}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}

proc connect2target() {   //$o1 target point process, $o2 returned NetCon


//  Using standard NetBuilder form. (Overly) simple assumption that first soma seg is trigger for AP...
//  Note: neuroConstruct does not use this func for creating connections (in serial mode!), but it can be useful when using generated files in NEURON's NetBuilder

    soma $o2 = new NetCon(&v(1), $o1)
    print "connect2target called on ", name
}

/*
//  This function is useful when checking what cells (aot sections) have been created. Run allcells() from nCtools.hoc...

proc toString() {
    strdef info
    sprint(info, "Cell ref: %s (%s), at: (%d, %d, %d)", reference, name, x, y, z)
    print info
}


//  This function is useful when checking network connections

proc netInfo() {
    strdef info
    sprint(info, "Cell reference: %s, type: %s", reference, type)
    print "--------  ",info
    print "    There are ", synlist.count(), " connections in ", synlist
    for i=0,synlist.count()-1 {
        print "        Connection from ", synlist.o[i].precell, " to: ", synlist.o[i].postcell
        print "        Pre:   Weight: ", synlist.o[i].weight, ", delay: ", synlist.o[i].delay, ", threshold: ", synlist.o[i].threshold
        print "        Post:  ", synlist.o[i].syn(), ", gmax: ", synlist.o[i].syn().gmax , ", e: ", synlist.o[i].syn().e , ", rise time: ", synlist.o[i].syn().tau_rise , ", decay time: ", synlist.o[i].syn().tau_decay
    print " "
    }


}
*/


endtemplate pyr_23_asym_stripped
